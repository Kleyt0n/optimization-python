import sys
sys.path.append('./')

import time
import numpy as np
import sympy as sy
from sympy import *

from qsopt.plots import plot_optim
from qsopt.optim import fletcher_reeves, steepest_descent


f = lambda x: 5*(((x[0] - 8)**2 + x[1]**2)**0.5 - 8)**2 - 7*x[1] + (((x[0] + 12)**2 + x[1]**2)**0.5 - 12)**2/2

grad = lambda x: np.array([(5*(((x[0] - 8)**2 + x[1]**2)**0.5 - 8)*(2*x[0] - 16))/((x[0] - 8)**2 + x[1]**2)**0.5 + ((((x[0] + 12)**2 + x[1]**2)**0.5 - 12)*(2*x[0] + 24))/(2*((x[0] + 12)**2 + x[1]**2)**0.5), (10*x[1]*(((x[0] - 8)**2 + x[1]**2)**0.5 - 8))/((x[0] - 8)**2 + x[1]**2)**0.5 + (x[1]*(((x[0] + 12)**2 + x[1]**2)**0.5 - 12))/((x[0] + 12)**2 + x[1]**2)**0.5 - 7])

hess = lambda x: np.array([[10*(8.0 - 1.0*x[0])*(1.0*x[0] - 8.0)*((x[1]**2 + (8 - x[0])**2)**0.5 - 8)/(x[1]**2 + (8 - x[0])**2)**1.5 + 1.0*(-1.0*x[0] - 12.0)*(1.0*x[0] + 12.0)*((x[1]**2 + (x[0] + 12)**2)**0.5 - 12)/(x[1]**2 + (x[0] + 12)**2)**1.5 + 1.0*(144.0*(0.0833333333333333*x[0] + 1)**2)/(x[1]**2 + (x[0] + 12)**2)**1.0 + 10*(64.0*(0.125*x[0] - 1)**2)/(x[1]**2 + (8 - x[0])**2)**1.0 + 10.0*((x[1]**2 + (8 - x[0])**2)**0.5 - 8)/(x[1]**2 + (8 - x[0])**2)**0.5 + 1.0*((x[1]**2 + (x[0] + 12)**2)**0.5 - 12)/(x[1]**2 + (x[0] + 12)**2)**0.5, -10.0*x[1]*(1.0*x[0] - 8.0)*((x[1]**2 + (8 - x[0])**2)**0.5 - 8)/(x[1]**2 + (8 - x[0])**2)**1.5 + 10.0*x[1]*(1.0*x[0] - 8.0)/(x[1]**2 + (8 - x[0])**2)**1.0 - 1.0*x[1]*(1.0*x[0] + 12.0)*((x[1]**2 + (x[0] + 12)**2)**0.5 - 12)/(x[1]**2 + (x[0] + 12)**2)**1.5 + 1.0*x[1]*(1.0*x[0] + 12.0)/(x[1]**2 + (x[0] + 12)**2)**1.0], 
                          [-10.0*x[1]*(1.0*x[0] - 8.0)*((x[1]**2 + (8 - x[0])**2)**0.5 - 8)/(x[1]**2 + (8 - x[0])**2)**1.5 + 10.0*x[1]*(1.0*x[0] - 8.0)/(x[1]**2 + (8 - x[0])**2)**1.0 - 1.0*x[1]*(1.0*x[0] + 12.0)*((x[1]**2 + (x[0] + 12)**2)**0.5 - 12)/(x[1]**2 + (x[0] + 12)**2)**1.5 + 1.0*x[1]*(1.0*x[0] + 12.0)/(x[1]**2 + (x[0] + 12)**2)**1.0, -10.0*x[1]**2*((x[1]**2 + (8 - x[0])**2)**0.5 - 8)/(x[1]**2 + (8 - x[0])**2)**1.5 + 10.0*x[1]**2/(x[1]**2 + (8 - x[0])**2)**1.0 - 1.0*x[1]**2*((x[1]**2 + (x[0] + 12)**2)**0.5 - 12)/(x[1]**2 + (x[0] + 12)**2)**1.5 + 1.0*x[1]**2/(x[1]**2 + (x[0] + 12)**2)**1.0 + 10.0*((x[1]**2 + (8 - x[0])**2)**0.5 - 8)/(x[1]**2 + (8 - x[0])**2)**0.5 + 1.0*((x[1]**2 + (x[0] + 12)**2)**0.5 - 12)/(x[1]**2 + (x[0] + 12)**2)**0.5]])


x0 = np.array([9,-2])
#method = steepest_descent(f, grad, x0)
method = fletcher_reeves(f, grad, x0)
plot_optim(f, x0, method)